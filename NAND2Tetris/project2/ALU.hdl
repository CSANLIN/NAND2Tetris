// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0 

    PARTS:
    //实现zx
    Mux16(a= x[0..15], b[0]=false,  // b 的最低位 (0位) 是 1
          b[1]=false,
          b[2]=false,
          b[3]=false,
          b[4]=false,
          b[5]=false,
          b[6]=false,
          b[7]=false,
          b[8]=false,
          b[9]=false,
          b[10]=false,
          b[11]=false,
          b[12]=false,
          b[13]=false,
          b[14]=false,
          b[15]=false , sel=zx , out= zxout);
    //实现nx
        Not16(in= zxout, out=nxnot );
        Mux16(a=zxout , b=nxnot , sel=nx , out=nxout );
    //实现zy
        Mux16(a= y[0..15],b[0]=false,  // b 的最低位 (0位) 是 1
          b[1]=false,
          b[2]=false,
          b[3]=false,
          b[4]=false,
          b[5]=false,
          b[6]=false,
          b[7]=false,
          b[8]=false,
          b[9]=false,
          b[10]=false,
          b[11]=false,
          b[12]=false,
          b[13]=false,
          b[14]=false,
          b[15]=false , sel= zy, out= zyout);
        Not16(in=zyout , out= nynot);
        Mux16(a= zyout, b= nynot, sel= ny, out=nyout );
        //实现功能选择
        Add16(a = nxout, b = nyout, out = addout);
        And16(a= nxout, b= nyout, out= andout);
        Mux16(a= andout, b= addout, sel= f, out= fout);

        //实现no
        Not16(in= fout, out= notf);
        Mux16(a= fout, b= notf, sel= no, out= out,out[0..7]=t1out,out[8..15]=t2out,out[15]=out15);
        
        //zr

        Or8Way(in= t1out, out= t1);
        Or8Way(in= t2out, out= t2);
        Or(a= t1, b= t2, out= t3);
        Not(in= t3, out=zr );
        //ng
        Or(a= out15, b=false , out=ng );
    
}